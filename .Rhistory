theme_classic() +theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(), legend.position=c(0.8,0.8), plot.title = element_text(size=22, hjust=0.5)) +
scale_fill_manual(values = wes_palette("GrandBudapest1"), "Frequency of choices")  + coord_cartesian(xlim=c(0,45)) + ylim(NA, 0.14)
ggplot(data=MCTRIGGERS, aes(x=reorder(names,-MCTRIGGERS.MEAN), y=MCTRIGGERS.MEAN, fill = quartis)) +
geom_bar(stat="identity") +geom_text(aes(label=ENshort), data=subset(MCTRIGGERS,quartis=="75-100%"), size=4, hjust = -0.05, angle =45, vjust=-0.3) +
geom_text(aes(label=ENshort), data=subset(MCTRIGGERS,quartis=="50-75%"), size=3, hjust = -0.05, angle =45, vjust=-0.3, color="azure4") +
geom_text(aes(label=ENshort), data=subset(MCTRIGGERS,names=="17"), size=3, hjust = -0.05, angle =45, vjust=-0.3) +
labs(title = "Triggers for cycling - relevance", x = "Triggers of Cyclists", y = "Mean of weighted scores") +
theme_classic() +theme(axis.text.x=element_blank(),axis.ticks.x=element_blank(), legend.position=c(0.8,0.8), plot.title = element_text(size=22, hjust=0.5)) +
scale_fill_manual(values = wes_palette("GrandBudapest1"), "Frequency of choices")  + coord_cartesian(xlim=c(0,45)) + ylim(NA, 0.14)
CONTAGENSevolucao <- read.delim("D:/GIS/Rosix/CONTAGENSevolucao.txt")
View(CONTAGENSevolucao)
save.image("D:/GIS/Rosix/.RData")
ggplot(CONTAGENSevolucao, aes(x=Ano, y=Ciclistas, fill=factor(Gira, levels=c("Trotinetas","Bicicleta partilhada", "Bicicleta própria")))) +
geom_bar(stat="identity", position="stack") + facet_grid(~Local2, switch="x") + scale_fill_manual(values=c("#D4A017", "#B2DF8A", "#33A02C")) +
guides(fill=guide_legend(reverse=TRUE), colour=guide_legend(reverse=TRUE)) +  theme_bw() + ggtitle("Comparação do volume de ciclistas observados por local") +
theme(legend.position = c(0.9,0.8), legend.title=element_blank(),panel.grid.major.x=element_blank(),axis.ticks.y=element_blank(),  axis.text.y=element_blank(), panel.border=element_blank(), strip.placement="outside", strip.background = element_rect(colour = "white")) +
labs(y="Volume de ciclistas", x= element_blank())
CONTAGENSzonas <- read.delim("D:/GIS/Rosix/CONTAGENSzonas.txt")
View(CONTAGENSzonas)
CONTAGENSzonasMT <- read.delim("D:/GIS/Rosix/CONTAGENSzonasMT.txt")
View(CONTAGENSzonasMT)
save.image("D:/GIS/Rosix/.RData")
library(knitr)
kable(CONTAGENSevolucao[3:10,], caption = "Exemplo dos dados em melt")
library(knitr)
kable(CONTAGENSevolucao[3:10,c(1:6)], caption = "Exemplo dos dados em melt")
library(knitr)
kable(CONTAGENSevolucao[3:10,c(1:6)], caption = "Exemplo dos dados em melt", row.names = NULL)
library(knitr)
kable(CONTAGENSevolucao[3:10,c(1:6)], caption = "Exemplo dos dados em melt", row.names = NA)
library(knitr)
kable(CONTAGENSevolucao[3:10,c(1:6)], caption = "Exemplo dos dados em melt", row.names = F)
directories <- list.dirs("D:\\GIS")
files <- lapply(directories, list.files, pattern=".r", full.names = TRUE)
files <- lapply(files, sort)
View(files)
directories <- list.dirs("D:\\GIS")
files <- lapply(directories, list.files, pattern=".r", full.names = TRUE, ignore.case=F)
files <- lapply(files, sort)
directories <- list.dirs("D:\\GIS")
files <- lapply(directories, list.files, pattern=".r", full.names = F, ignore.case=F)
files <- lapply(files, sort)
View(files)
files[[92]]
directories <- list.dirs("D:\\GIS")
files <- lapply(directories, list.files, pattern="\\.r$", full.names = F, ignore.case=F)
files <- lapply(files, sort)
View(files)
files<-list.files("D:\\GIS", pattern="\\.r$", full.names = F, ignore.case=F)
files<-list.files("D:\\GIS\\", pattern="\\.r$", full.names = F, ignore.case=F)
rm(files, directories)
save.image("D:/GIS/Rosix/.RData")
library(stplanr)
View(Viagens)
install.packages("export")
library(export)
boxplot(count ~ spray, data = InsectSprays, las = 2)
graph2doc(file="plot.docx", width=7, height=5)
graph2ppt(file="plot.pptx", width=7, height=5)
library(export)
boxplot(count ~ spray, data = InsectSprays, las = 2)
graph2doc(file="plot.docx", width=7, height=5)
graph2ppt(file="plot.pptx", width=7, height=5) #em inches
#o comando refere-se ao último plot que foi feito
PERSONALITY <- read.delim2("D:/GIS/Rosix/PERSONALITY.txt")
View(PERSONALITY)
save.image("D:/GIS/Rosix/.RData")
library(Hmisc)
library(corrplot)
library(ggcorrplot)
#spearman para não paramétricos e rank-based
res<-cor(Personality[c(1:18)], method = "spearman", use = "complete.obs")
library(Hmisc)
library(corrplot)
library(ggcorrplot)
#spearman para não paramétricos e rank-based
res<-cor(PERSONALITY[c(1:18)], method = "spearman", use = "complete.obs")
pers<-as.numeric(PERSONALITY)
rm(PERSONALITY)
PERSONALITY <- read.delim2("D:/GIS/Rosix/PERSONALITY.txt")
View(PERSONALITY)
library(Hmisc)
library(corrplot)
library(ggcorrplot)
#spearman para não paramétricos e rank-based
res<-cor(PERSONALITY[c(1:18)], method = "spearman", use = "complete.obs")
round(res,2)
res2 <- rcorr(as.matrix(PERSONALITY[c(1:18)],method = "spearman", use = "complete.obs")) #agora com p-values
res2
flattenCorrMatrix(res2$r, res2$P)
res<-cor(PERSONALITY[c(1:18)], method = "spearman", use = "complete.obs")
round(res,2)
res2 <- rcorr(as.matrix(PERSONALITY[c(1:18)],method = "spearman", use = "complete.obs")) #agora com p-values
corrplot(res, p.mat = res2$P, type = "upper", order = "FPC", method = "color",
insig = "pch", pch.cex = .9,tl.col = "black")
col<- colorRampPalette(c("blue", "white", "red"))(20)
heatmap(x = res, col = col, symm = TRUE)
save.image("D:/GIS/Rosix/.RData")
names(Personality)[c(1:18)]<- c("Optimist","Adventurous","Routines","Spontaneous","Outdoors","RiskTaker",
"CloseHome","Efficient","Variety","OnTime","Alone","Independent","Creative",
"Patient","Restless","Leader","Participative","Lazy")
names(PERSONALITY)[c(1:18)]<- c("Optimist","Adventurous","Routines","Spontaneous","Outdoors","RiskTaker",
"CloseHome","Efficient","Variety","OnTime","Alone","Independent","Creative",
"Patient","Restless","Leader","Participative","Lazy")
save.image("D:/GIS/Rosix/.RData")
Personalityyy <- read.delim2("D:/GIS/Rosix/Personalityyy.txt")
View(Personalityyy)
Personalityyy3 <- read.delim2("D:/GIS/Rosix/Personalityyy3.txt")
View(Personalityyy3)
library(likert)
Resultyy3 = likert(Personalityyy3)
plot(Resultyy3, type="bar",centered=F)+ggtitle("Cyclists")
ResultyG_1 <- likert(Personalityyy[c(1:6)], grouping=Personalityyy$CHANGE_Class3)
ResultyGs_1 <- likert(summary = ResultyG_1$results, grouping = ResultyG_1$results[,1])
plot(ResultyGs_1, type="bar", centered=FALSE)
tab <- read.delim("D:/GIS/Rosix/tab.txt")
View(tab)
library(tidyverse)
library(ggplot2)
mytitle<-"How do you assess the travel experience \nof the following modes of transportation?"
mylevels<-c("Strongly dislike",	"Dislike",	"Indifferent",	"Like",	"Strongly like")
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
colnames(tab2)<-c("outcome",mylevels[1:floor(numlevels/2)],"midlow",
"midhigh",mylevels[numcenter:numlevels])
View(tab)
tab <- read.delim("D:/GIS/Rosix/tab.txt", row.names=1)
View(tab)
colnames(tab)<-c("0","No","I am not sure",
"Yes","5","midvalues")
colnames(tab)<-c("SFS","0","No","I am not sure",
"Yes","5","midvalues")
library(tidyverse)
library(ggplot2)
mytitle<-"How do you assess the travel experience \nof the following modes of transportation?"
mylevels<-c("Strongly dislike",	"Dislike",	"Indifferent",	"Like",	"Strongly like")
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
colnames(tab2)<-c("outcome",mylevels[1:floor(numlevels/2)],"midlow",
"midhigh",mylevels[numcenter:numlevels])
View(tab2)
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
tab<-tab[,-c(7)]
library(tidyverse)
library(ggplot2)
mytitle<-"How do you assess the travel experience \nof the following modes of transportation?"
mylevels<-c("Strongly dislike",	"Dislike",	"Indifferent",	"Like",	"Strongly like")
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
colnames(tab2)<-c("outcome",mylevels[1:floor(numlevels/2)],"midlow",
"midhigh",mylevels[numcenter:numlevels])
numlevels<-length(mylevels)+1
point1<-2
point2<-((numlevels)/2)+1
point3<-point2+1
point4<-numlevels+1
mymin<-(ceiling(max(rowSums(tab2[,point1:point2]))*4)/4)*-100
mymax<-(ceiling(max(rowSums(tab2[,point3:point4]))*4)/4)*100
numlevels<-length(tab[1,])-1
temp.rows<-length(tab2[,1])
pal<-brewer.pal((numlevels-1),"RdBu")
tab<-tab[,-c(7)]
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
mytitle<-"How do you assess the travel experience \nof the following modes of transportation?"
mylevels<-c("Strongly dislike",	"Dislike",	"Indifferent",	"Like",	"Strongly like")
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
colnames(tab2)<-c("outcome",mylevels[1:floor(numlevels/2)],"midlow",
"midhigh",mylevels[numcenter:numlevels])
numlevels<-length(mylevels)+1
point1<-2
point2<-((numlevels)/2)+1
point3<-point2+1
point4<-numlevels+1
mymin<-(ceiling(max(rowSums(tab2[,point1:point2]))*4)/4)*-100
mymax<-(ceiling(max(rowSums(tab2[,point3:point4]))*4)/4)*100
numlevels<-length(tab[1,])-1
temp.rows<-length(tab2[,1])
pal<-brewer.pal((numlevels-1),"RdBu")
pal[ceiling(numlevels/2)]<-"#DFDFDF"
legend.pal<-pal
pal<-c(pal[1:(ceiling(numlevels/2)-1)], pal[ceiling(numlevels/2)],
pal[ceiling(numlevels/2)], pal[(ceiling(numlevels/2)+1):(numlevels-1)])
tab3<-melt(tab2,id="outcome")
tab<-tab[,-c(7)]
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
mytitle<-"How do you assess the travel experience \nof the following modes of transportation?"
mylevels<-c("Strongly dislike",	"Dislike",	"Indifferent",	"Like",	"Strongly like")
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
colnames(tab2)<-c("outcome",mylevels[1:floor(numlevels/2)],"midlow",
"midhigh",mylevels[numcenter:numlevels])
numlevels<-length(mylevels)+1
point1<-2
point2<-((numlevels)/2)+1
point3<-point2+1
point4<-numlevels+1
mymin<-(ceiling(max(rowSums(tab2[,point1:point2]))*4)/4)*-100
mymax<-(ceiling(max(rowSums(tab2[,point3:point4]))*4)/4)*100
numlevels<-length(tab[1,])-1
temp.rows<-length(tab2[,1])
pal<-brewer.pal((numlevels-1),"RdBu")
pal[ceiling(numlevels/2)]<-"#DFDFDF"
legend.pal<-pal
pal<-c(pal[1:(ceiling(numlevels/2)-1)], pal[ceiling(numlevels/2)],
pal[ceiling(numlevels/2)], pal[(ceiling(numlevels/2)+1):(numlevels-1)])
tab3<-melt(tab2,id="outcome")
tab3$col<-rep(pal,each=temp.rows)
tab3$value<-tab3$value*100
tab3$outcome<-str_wrap(tab3$outcome, width = 40)
tab3$outcome<-factor(tab3$outcome, levels = tab2$outcome[order(-(tab2[,5]+tab2[,6]+tab2[,7]))])
highs<-na.omit(tab3[(length(tab3[,1])/2)+1:length(tab3[,1]),])
lows<-na.omit(tab3[1:(length(tab3[,1])/2),])
lows <- lows[rev(rownames(lows)),]
lows$col <- factor(lows$col, levels = c("#CA0020","#F4A582", "#DFDFDF"))
ggplot() + geom_bar(data=highs, aes(x = outcome, y=value, fill=col), position="stack", stat="identity") +
geom_bar(data=lows, aes(x = outcome, y=-value, fill=col), position="stack", stat="identity") +
geom_hline(yintercept = 0, color =c("white")) +
scale_fill_identity("",labels = mylevels, breaks=legend.pal, guide="legend") +
theme_fivethirtyeight() +
coord_flip() +
labs(title=mytitle, y="Percent",x="") +
theme(plot.title = element_text(size=14, hjust=0.5)) +
theme(axis.text.y = element_text(hjust=0)) +
theme(legend.position = "bottom") +
theme(rect=element_rect(fill ="White", linetype = 0, colour = NA)) +
theme(axis.title = element_text(size=8,hjust=1)) +
scale_y_continuous(breaks=seq(mymin,mymax,25), limits=c(-62,mymax)) #substituí mymin por -62 para cortar um pouco à esquerda
tab<-tab[,-c(7)]
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(ggthemes)
mytitle<-"How do you assess the travel experience \nof the following modes of transportation?"
mylevels<-c("Strongly dislike",	"Dislike",	"Indifferent",	"Like",	"Strongly like")
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
colnames(tab2)<-c("outcome",mylevels[1:floor(numlevels/2)],"midlow",
"midhigh",mylevels[numcenter:numlevels])
numlevels<-length(mylevels)+1
point1<-2
point2<-((numlevels)/2)+1
point3<-point2+1
point4<-numlevels+1
mymin<-(ceiling(max(rowSums(tab2[,point1:point2]))*4)/4)*-100
mymax<-(ceiling(max(rowSums(tab2[,point3:point4]))*4)/4)*100
numlevels<-length(tab[1,])-1
temp.rows<-length(tab2[,1])
pal<-brewer.pal((numlevels-1),"RdBu")
pal[ceiling(numlevels/2)]<-"#DFDFDF"
legend.pal<-pal
pal<-c(pal[1:(ceiling(numlevels/2)-1)], pal[ceiling(numlevels/2)],
pal[ceiling(numlevels/2)], pal[(ceiling(numlevels/2)+1):(numlevels-1)])
tab3<-melt(tab2,id="outcome")
tab3$col<-rep(pal,each=temp.rows)
tab3$value<-tab3$value*100
tab3$outcome<-str_wrap(tab3$outcome, width = 40)
tab3$outcome<-factor(tab3$outcome, levels = tab2$outcome[order(-(tab2[,5]+tab2[,6]+tab2[,7]))])
highs<-na.omit(tab3[(length(tab3[,1])/2)+1:length(tab3[,1]),])
lows<-na.omit(tab3[1:(length(tab3[,1])/2),])
lows <- lows[rev(rownames(lows)),]
lows$col <- factor(lows$col, levels = c("#CA0020","#F4A582", "#DFDFDF"))
ggplot() + geom_bar(data=highs, aes(x = outcome, y=value, fill=col), position="stack", stat="identity") +
geom_bar(data=lows, aes(x = outcome, y=-value, fill=col), position="stack", stat="identity") +
geom_hline(yintercept = 0, color =c("white")) +
scale_fill_identity("",labels = mylevels, breaks=legend.pal, guide="legend") +
theme_fivethirtyeight() +
coord_flip() +
labs(title=mytitle, y="Percent",x="") +
theme(plot.title = element_text(size=14, hjust=0.5)) +
theme(axis.text.y = element_text(hjust=0)) +
theme(legend.position = "bottom") +
theme(rect=element_rect(fill ="White", linetype = 0, colour = NA)) +
theme(axis.title = element_text(size=8,hjust=1)) +
scale_y_continuous(breaks=seq(mymin,mymax,25), limits=c(-62,mymax)) #substituí mymin por -62 para cortar um pouco à esquerda
tab<-tab[,-c(7)]
tab <- read.delim("D:/GIS/Rosix/tab.txt", row.names=1)
View(tab)
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(ggthemes)
mytitle<-"How do you assess the travel experience \nof the following modes of transportation?"
mylevels<-c("Strongly dislike",	"Dislike",	"Indifferent",	"Like",	"Strongly like")
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
colnames(tab2)<-c("outcome",mylevels[1:floor(numlevels/2)],"midlow",
"midhigh",mylevels[numcenter:numlevels])
numlevels<-length(mylevels)+1
point1<-2
point2<-((numlevels)/2)+1
point3<-point2+1
point4<-numlevels+1
mymin<-(ceiling(max(rowSums(tab2[,point1:point2]))*4)/4)*-100
mymax<-(ceiling(max(rowSums(tab2[,point3:point4]))*4)/4)*100
numlevels<-length(tab[1,])-1
temp.rows<-length(tab2[,1])
pal<-brewer.pal((numlevels-1),"RdBu")
pal[ceiling(numlevels/2)]<-"#DFDFDF"
legend.pal<-pal
pal<-c(pal[1:(ceiling(numlevels/2)-1)], pal[ceiling(numlevels/2)],
pal[ceiling(numlevels/2)], pal[(ceiling(numlevels/2)+1):(numlevels-1)])
tab3<-melt(tab2,id="outcome")
tab3$col<-rep(pal,each=temp.rows)
tab3$value<-tab3$value*100
tab3$outcome<-str_wrap(tab3$outcome, width = 40)
tab3$outcome<-factor(tab3$outcome, levels = tab2$outcome[order(-(tab2[,5]+tab2[,6]+tab2[,7]))])
highs<-na.omit(tab3[(length(tab3[,1])/2)+1:length(tab3[,1]),])
lows<-na.omit(tab3[1:(length(tab3[,1])/2),])
lows <- lows[rev(rownames(lows)),]
lows$col <- factor(lows$col, levels = c("#CA0020","#F4A582", "#DFDFDF"))
ggplot() + geom_bar(data=highs, aes(x = outcome, y=value, fill=col), position="stack", stat="identity") +
geom_bar(data=lows, aes(x = outcome, y=-value, fill=col), position="stack", stat="identity") +
geom_hline(yintercept = 0, color =c("white")) +
scale_fill_identity("",labels = mylevels, breaks=legend.pal, guide="legend") +
theme_fivethirtyeight() +
coord_flip() +
labs(title=mytitle, y="Percent",x="") +
theme(plot.title = element_text(size=14, hjust=0.5)) +
theme(axis.text.y = element_text(hjust=0)) +
theme(legend.position = "bottom") +
theme(rect=element_rect(fill ="White", linetype = 0, colour = NA)) +
theme(axis.title = element_text(size=8,hjust=1)) +
scale_y_continuous(breaks=seq(mymin,mymax,25), limits=c(-62,mymax)) #substituí mymin por -62 para cortar um pouco à esquerda
tab<-tab[,-c(7)]
save.image("D:/GIS/Rosix/.RData")
ResultyG_1 <- likert(Personalityyy[c(1:6)], grouping=Personalityyy$CHANGE_Class3)
ResultyGs_1 <- likert(summary = ResultyG_1$results, grouping = ResultyG_1$results[,1])
plot(ResultyGs_1, type="bar", centered=FALSE)
ResultyG_1 <- likert(Personalityyy[c(1:6)], grouping=Personalityyy$CHANGE_Class3)
ResultyGs_1 <- likert(summary = ResultyG_1$results, grouping = ResultyG_1$results[,1])
plot(ResultyGs_1, type="bar", centered=FALSE)
library(tidyverse)
#criar um ponto com coordenadas conhecidas
PontoD <- data.frame(longitude = c(-9.121910), latitude = c(38.767135))
PontoD <- st_as_sf(PontoD,coords = c("longitude", "latitude"), crs=4326)
library(sf)
#criar um ponto com coordenadas conhecidas
PontoD <- data.frame(longitude = c(-9.121910), latitude = c(38.767135))
PontoD <- st_as_sf(PontoD,coords = c("longitude", "latitude"), crs=4326)
class(PontoD)
library(sf)
RouteD<-st_read("D:/GIS/Ricardo/estudodeprocuracicloexpresso/D_Cyclingfastest.shp")
View(RouteD)
library(shiny)
#tendo calculado as rotas de bicicleta de casa dos alunos até à escola D, no QGIS
library(stplanr)
sl = RouteD[RouteD$DIST_KM>0.5 & RouteD$DIST_KM<4 ,] #filtrar só aqueles a mais de 500m e menos de 4km
sl$alunos = 1 #cada route tem 1 aluno a fazer (para depois agregar)
rnetD = overline2(sl, "alunos") #partir as rotas em segmentos e somá-los
lwd = rnetD$alunos / mean(rnetD$alunos) #line width
plot(rnetD, lwd = lwd)
#tendo calculado as rotas de bicicleta de casa dos alunos até à escola D, no QGIS
library(stplanr)
sl = RouteD[RouteD$DIST_KM>0.5 & RouteD$DIST_KM<4 ,] #filtrar só aqueles a mais de 500m e menos de 4km
sl$alunos = 1 #cada route tem 1 aluno a fazer (para depois agregar)
rnetD = overline2(sl, "alunos") #partir as rotas em segmentos e somá-los
lwd = rnetD$alunos / mean(rnetD$alunos) #line width
plot(rnetD, lwd = lwd)
library(shiny)
library(leaflet)
ui = fluidPage(
sliderInput(inputId = "alunos", "Alunos", 1, 102, value = 5),  #slide bar definições
leafletOutput(outputId = "map")
)
server = function(input, output) {
output$map = renderLeaflet({
leaflet() %>% addProviderTiles("OpenStreetMap.BlackAndWhite") %>% #base do OSM
addMarkers(data=PontoD) %>%   #ponto com a escola
addPolylines(col="red", data = rnetD[rnetD$alunos > input$alunos, ])})  #linhas da rede
}
shinyApp(ui, server)
# saveRDS(TABELA, "D:/R/Tabela.Rds")
save.image(".RData")
# saveRDS(TABELA, "D:/R/Tabela.Rds")
save.image(".RData")
shinyApp(ui, server)
install.packages(c("devtools", "rmarkdown", "shiny"))
# saveRDS(TABELA, "D:/R/Tabela.Rds")
save.image(".RData")
# saveRDS(TABELA, "D:/R/Tabela.Rds")
save.image(".RData")
library(shiny)
library(leaflet)
ui = fluidPage(
sliderInput(inputId = "alunos", "Alunos", 1, 102, value = 5),  #slide bar definições
leafletOutput(outputId = "map")
)
server = function(input, output) {
output$map = renderLeaflet({
leaflet() %>% addProviderTiles("OpenStreetMap.BlackAndWhite") %>% #base do OSM
addMarkers(data=PontoD) %>%   #ponto com a escola
addPolylines(col="red", data = rnetD[rnetD$alunos > input$alunos, ])})  #linhas da rede
}
shinyApp(ui, server)
# saveRDS(TABELA, "D:/R/Tabela.Rds")
save.image(".RData")
library(shiny)
library(leaflet)
ui = fluidPage(
sliderInput(inputId = "alunos", "Alunos", 1, 102, value = 5),  #slide bar definições
leafletOutput(outputId = "map")
)
server = function(input, output) {
output$map = renderLeaflet({
leaflet() %>% addProviderTiles("OpenStreetMap.BlackAndWhite") %>% #base do OSM
addMarkers(data=PontoD) %>%   #ponto com a escola
addPolylines(col="red", data = rnetD[rnetD$alunos > input$alunos, ])})  #linhas da rede
}
shinyApp(ui, server)
# saveRDS(TABELA, "D:/R/Tabela.Rds")
save.image(".RData")
library(tidyverse)
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS[,-c(1,2)], type = "html", title = "Descriptive statistics", digits=1 , out="summary1.htm")
#teste com summarytools, lindo!
library(summarytools) #para todo o tipo, gera um html
DescStat<-dfSummary(TODOS[,c(3,4,5,8,15,17,46)])
view(DescStat) #abrir o botão do view pane para o browser, guardar como html
TODOS$Income <- ordered(TODOS$Income)
stargazer::stargazer(TODOS[,-c(1,2)], type = "html", title = "Descriptive statistics", digits=1 , out="summary1.htm")
view(stargazer(TODOS[,-c(1,2)], type = "html", title = "Descriptive statistics", digits=1 , out="summary1.htm"))
view(stargazer(TODOS[,-c(1,2)], type = "html", title = "Descriptive statistics", digits=1)
view(stargazer(TODOS[,-c(1,2)], type = "html", title = "Descriptive statistics", digits=1))
stargazer::stargazer(TODOS, type = "html", title = "Descriptive statistics", digits=1 , out="summary1.htm")
stargazer::stargazer(TODOS, title = "Descriptive statistics", digits=1 , out="summary1.htm")
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS, type = "html", title = "Descriptive statistics", digits=1 , out="summary1.htm")
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS, type = "text", title = "Descriptive statistics", digits=1 , out="summary1.htm")
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS[,c(3,15:17)], type = "text", title = "Descriptive statistics", digits=1 , out="summary1.htm")
#teste com summarytools, lindo!
library(summarytools) #para todo o tipo, gera um html
DescStat<-dfSummary(TODOS[,c(3,4,5,8,15,17)])
view(DescStat) #abrir o botão do view pane para o browser, guardar como html
#teste com summarytools, lindo!
library(summarytools) #para todo o tipo, gera um html
DescStat<-dfSummary(TODOS[,c(3,4,8,15)])
DescStat
#view(DescStat) #abrir o botão do view pane para o browser, guardar como html
#teste com summarytools, lindo!
library(summarytools) #para todo o tipo, gera um html
DescStat<-dfSummary(TODOS[,c(3,4,8,15)], plain.ascii = FALSE)
DescStat
#view(DescStat) #abrir o botão do view pane para o browser, guardar como html
#teste com summarytools, lindo!
library(summarytools) #para todo o tipo, gera um html
DescStat<-dfSummary(TODOS[,c(3,4,8,15)])
print(DescStat, method = "render")
#view(DescStat) #abrir o botão do view pane para o browser, guardar como html
print(DescStat, method = "render")
print(DescStat, method = "render")
#tabela com a descrição das variáveis contínuas e categóricas!
library(summarytools) #para todo o tipo, gera um html
DescStat<-dfSummary(TODOS[,c(3,4,8,15)])
view(DescStat) #abrir o botão do view pane para o browser, guardar como html
save.image(".RData")
print(DescStat, method = "render")
print(DescStat, method = "render")
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS[,c(3,15:17)], type = "text", title = "Descriptive statistics", digits=1)
#mudar o type para text, latex ou htm
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS[,c(3,15:17)], type = "text", title = "Descriptive statistics", digits=1) #mudar o type para text, latex ou htm
print(dfSummary(TODOS[,c(3,4,8,15)], valid.col = F, style = "grid", method = "render")
print(dfSummary(TODOS[,c(3,4,8,15)], valid.col = F, style = "grid", method = "render"))
print(dfSummary(TODOS[,c(3,4,8,15)], valid.col = F, method = "render"))
print(DescStat, method = "render"))
print(DescStat, method = "render")
print(DescStat, valid.col=F, method = "render")
print(DescStat,style = "grid", valid.col=F, method = "render")
print(DescStat,style = "grid",plain.ascii = FALSE, valid.col=F, method = "render")
print(DescStat,style = "grid",plain.ascii = FALSE, valid.col=F, method = "render", tmp.img.dir= "/tmp")
