install.packages("export")
library(export)
boxplot(count ~ spray, data = InsectSprays, las = 2)
graph2doc(file="plot.docx", width=7, height=5)
graph2ppt(file="plot.pptx", width=7, height=5)
library(export)
boxplot(count ~ spray, data = InsectSprays, las = 2)
graph2doc(file="plot.docx", width=7, height=5)
graph2ppt(file="plot.pptx", width=7, height=5) #em inches
#o comando refere-se ao último plot que foi feito
PERSONALITY <- read.delim2("D:/GIS/Rosix/PERSONALITY.txt")
View(PERSONALITY)
save.image("D:/GIS/Rosix/.RData")
library(Hmisc)
library(corrplot)
library(ggcorrplot)
#spearman para não paramétricos e rank-based
res<-cor(Personality[c(1:18)], method = "spearman", use = "complete.obs")
library(Hmisc)
library(corrplot)
library(ggcorrplot)
#spearman para não paramétricos e rank-based
res<-cor(PERSONALITY[c(1:18)], method = "spearman", use = "complete.obs")
pers<-as.numeric(PERSONALITY)
rm(PERSONALITY)
PERSONALITY <- read.delim2("D:/GIS/Rosix/PERSONALITY.txt")
View(PERSONALITY)
library(Hmisc)
library(corrplot)
library(ggcorrplot)
#spearman para não paramétricos e rank-based
res<-cor(PERSONALITY[c(1:18)], method = "spearman", use = "complete.obs")
round(res,2)
res2 <- rcorr(as.matrix(PERSONALITY[c(1:18)],method = "spearman", use = "complete.obs")) #agora com p-values
res2
flattenCorrMatrix(res2$r, res2$P)
res<-cor(PERSONALITY[c(1:18)], method = "spearman", use = "complete.obs")
round(res,2)
res2 <- rcorr(as.matrix(PERSONALITY[c(1:18)],method = "spearman", use = "complete.obs")) #agora com p-values
corrplot(res, p.mat = res2$P, type = "upper", order = "FPC", method = "color",
insig = "pch", pch.cex = .9,tl.col = "black")
col<- colorRampPalette(c("blue", "white", "red"))(20)
heatmap(x = res, col = col, symm = TRUE)
save.image("D:/GIS/Rosix/.RData")
names(Personality)[c(1:18)]<- c("Optimist","Adventurous","Routines","Spontaneous","Outdoors","RiskTaker",
"CloseHome","Efficient","Variety","OnTime","Alone","Independent","Creative",
"Patient","Restless","Leader","Participative","Lazy")
names(PERSONALITY)[c(1:18)]<- c("Optimist","Adventurous","Routines","Spontaneous","Outdoors","RiskTaker",
"CloseHome","Efficient","Variety","OnTime","Alone","Independent","Creative",
"Patient","Restless","Leader","Participative","Lazy")
save.image("D:/GIS/Rosix/.RData")
Personalityyy <- read.delim2("D:/GIS/Rosix/Personalityyy.txt")
View(Personalityyy)
Personalityyy3 <- read.delim2("D:/GIS/Rosix/Personalityyy3.txt")
View(Personalityyy3)
library(likert)
Resultyy3 = likert(Personalityyy3)
plot(Resultyy3, type="bar",centered=F)+ggtitle("Cyclists")
ResultyG_1 <- likert(Personalityyy[c(1:6)], grouping=Personalityyy$CHANGE_Class3)
ResultyGs_1 <- likert(summary = ResultyG_1$results, grouping = ResultyG_1$results[,1])
plot(ResultyGs_1, type="bar", centered=FALSE)
tab <- read.delim("D:/GIS/Rosix/tab.txt")
View(tab)
library(tidyverse)
library(ggplot2)
mytitle<-"How do you assess the travel experience \nof the following modes of transportation?"
mylevels<-c("Strongly dislike",	"Dislike",	"Indifferent",	"Like",	"Strongly like")
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
colnames(tab2)<-c("outcome",mylevels[1:floor(numlevels/2)],"midlow",
"midhigh",mylevels[numcenter:numlevels])
View(tab)
tab <- read.delim("D:/GIS/Rosix/tab.txt", row.names=1)
View(tab)
colnames(tab)<-c("0","No","I am not sure",
"Yes","5","midvalues")
colnames(tab)<-c("SFS","0","No","I am not sure",
"Yes","5","midvalues")
library(tidyverse)
library(ggplot2)
mytitle<-"How do you assess the travel experience \nof the following modes of transportation?"
mylevels<-c("Strongly dislike",	"Dislike",	"Indifferent",	"Like",	"Strongly like")
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
colnames(tab2)<-c("outcome",mylevels[1:floor(numlevels/2)],"midlow",
"midhigh",mylevels[numcenter:numlevels])
View(tab2)
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
tab<-tab[,-c(7)]
library(tidyverse)
library(ggplot2)
mytitle<-"How do you assess the travel experience \nof the following modes of transportation?"
mylevels<-c("Strongly dislike",	"Dislike",	"Indifferent",	"Like",	"Strongly like")
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
colnames(tab2)<-c("outcome",mylevels[1:floor(numlevels/2)],"midlow",
"midhigh",mylevels[numcenter:numlevels])
numlevels<-length(mylevels)+1
point1<-2
point2<-((numlevels)/2)+1
point3<-point2+1
point4<-numlevels+1
mymin<-(ceiling(max(rowSums(tab2[,point1:point2]))*4)/4)*-100
mymax<-(ceiling(max(rowSums(tab2[,point3:point4]))*4)/4)*100
numlevels<-length(tab[1,])-1
temp.rows<-length(tab2[,1])
pal<-brewer.pal((numlevels-1),"RdBu")
tab<-tab[,-c(7)]
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
mytitle<-"How do you assess the travel experience \nof the following modes of transportation?"
mylevels<-c("Strongly dislike",	"Dislike",	"Indifferent",	"Like",	"Strongly like")
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
colnames(tab2)<-c("outcome",mylevels[1:floor(numlevels/2)],"midlow",
"midhigh",mylevels[numcenter:numlevels])
numlevels<-length(mylevels)+1
point1<-2
point2<-((numlevels)/2)+1
point3<-point2+1
point4<-numlevels+1
mymin<-(ceiling(max(rowSums(tab2[,point1:point2]))*4)/4)*-100
mymax<-(ceiling(max(rowSums(tab2[,point3:point4]))*4)/4)*100
numlevels<-length(tab[1,])-1
temp.rows<-length(tab2[,1])
pal<-brewer.pal((numlevels-1),"RdBu")
pal[ceiling(numlevels/2)]<-"#DFDFDF"
legend.pal<-pal
pal<-c(pal[1:(ceiling(numlevels/2)-1)], pal[ceiling(numlevels/2)],
pal[ceiling(numlevels/2)], pal[(ceiling(numlevels/2)+1):(numlevels-1)])
tab3<-melt(tab2,id="outcome")
tab<-tab[,-c(7)]
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
mytitle<-"How do you assess the travel experience \nof the following modes of transportation?"
mylevels<-c("Strongly dislike",	"Dislike",	"Indifferent",	"Like",	"Strongly like")
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
colnames(tab2)<-c("outcome",mylevels[1:floor(numlevels/2)],"midlow",
"midhigh",mylevels[numcenter:numlevels])
numlevels<-length(mylevels)+1
point1<-2
point2<-((numlevels)/2)+1
point3<-point2+1
point4<-numlevels+1
mymin<-(ceiling(max(rowSums(tab2[,point1:point2]))*4)/4)*-100
mymax<-(ceiling(max(rowSums(tab2[,point3:point4]))*4)/4)*100
numlevels<-length(tab[1,])-1
temp.rows<-length(tab2[,1])
pal<-brewer.pal((numlevels-1),"RdBu")
pal[ceiling(numlevels/2)]<-"#DFDFDF"
legend.pal<-pal
pal<-c(pal[1:(ceiling(numlevels/2)-1)], pal[ceiling(numlevels/2)],
pal[ceiling(numlevels/2)], pal[(ceiling(numlevels/2)+1):(numlevels-1)])
tab3<-melt(tab2,id="outcome")
tab3$col<-rep(pal,each=temp.rows)
tab3$value<-tab3$value*100
tab3$outcome<-str_wrap(tab3$outcome, width = 40)
tab3$outcome<-factor(tab3$outcome, levels = tab2$outcome[order(-(tab2[,5]+tab2[,6]+tab2[,7]))])
highs<-na.omit(tab3[(length(tab3[,1])/2)+1:length(tab3[,1]),])
lows<-na.omit(tab3[1:(length(tab3[,1])/2),])
lows <- lows[rev(rownames(lows)),]
lows$col <- factor(lows$col, levels = c("#CA0020","#F4A582", "#DFDFDF"))
ggplot() + geom_bar(data=highs, aes(x = outcome, y=value, fill=col), position="stack", stat="identity") +
geom_bar(data=lows, aes(x = outcome, y=-value, fill=col), position="stack", stat="identity") +
geom_hline(yintercept = 0, color =c("white")) +
scale_fill_identity("",labels = mylevels, breaks=legend.pal, guide="legend") +
theme_fivethirtyeight() +
coord_flip() +
labs(title=mytitle, y="Percent",x="") +
theme(plot.title = element_text(size=14, hjust=0.5)) +
theme(axis.text.y = element_text(hjust=0)) +
theme(legend.position = "bottom") +
theme(rect=element_rect(fill ="White", linetype = 0, colour = NA)) +
theme(axis.title = element_text(size=8,hjust=1)) +
scale_y_continuous(breaks=seq(mymin,mymax,25), limits=c(-62,mymax)) #substituí mymin por -62 para cortar um pouco à esquerda
tab<-tab[,-c(7)]
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(ggthemes)
mytitle<-"How do you assess the travel experience \nof the following modes of transportation?"
mylevels<-c("Strongly dislike",	"Dislike",	"Indifferent",	"Like",	"Strongly like")
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
colnames(tab2)<-c("outcome",mylevels[1:floor(numlevels/2)],"midlow",
"midhigh",mylevels[numcenter:numlevels])
numlevels<-length(mylevels)+1
point1<-2
point2<-((numlevels)/2)+1
point3<-point2+1
point4<-numlevels+1
mymin<-(ceiling(max(rowSums(tab2[,point1:point2]))*4)/4)*-100
mymax<-(ceiling(max(rowSums(tab2[,point3:point4]))*4)/4)*100
numlevels<-length(tab[1,])-1
temp.rows<-length(tab2[,1])
pal<-brewer.pal((numlevels-1),"RdBu")
pal[ceiling(numlevels/2)]<-"#DFDFDF"
legend.pal<-pal
pal<-c(pal[1:(ceiling(numlevels/2)-1)], pal[ceiling(numlevels/2)],
pal[ceiling(numlevels/2)], pal[(ceiling(numlevels/2)+1):(numlevels-1)])
tab3<-melt(tab2,id="outcome")
tab3$col<-rep(pal,each=temp.rows)
tab3$value<-tab3$value*100
tab3$outcome<-str_wrap(tab3$outcome, width = 40)
tab3$outcome<-factor(tab3$outcome, levels = tab2$outcome[order(-(tab2[,5]+tab2[,6]+tab2[,7]))])
highs<-na.omit(tab3[(length(tab3[,1])/2)+1:length(tab3[,1]),])
lows<-na.omit(tab3[1:(length(tab3[,1])/2),])
lows <- lows[rev(rownames(lows)),]
lows$col <- factor(lows$col, levels = c("#CA0020","#F4A582", "#DFDFDF"))
ggplot() + geom_bar(data=highs, aes(x = outcome, y=value, fill=col), position="stack", stat="identity") +
geom_bar(data=lows, aes(x = outcome, y=-value, fill=col), position="stack", stat="identity") +
geom_hline(yintercept = 0, color =c("white")) +
scale_fill_identity("",labels = mylevels, breaks=legend.pal, guide="legend") +
theme_fivethirtyeight() +
coord_flip() +
labs(title=mytitle, y="Percent",x="") +
theme(plot.title = element_text(size=14, hjust=0.5)) +
theme(axis.text.y = element_text(hjust=0)) +
theme(legend.position = "bottom") +
theme(rect=element_rect(fill ="White", linetype = 0, colour = NA)) +
theme(axis.title = element_text(size=8,hjust=1)) +
scale_y_continuous(breaks=seq(mymin,mymax,25), limits=c(-62,mymax)) #substituí mymin por -62 para cortar um pouco à esquerda
tab<-tab[,-c(7)]
tab <- read.delim("D:/GIS/Rosix/tab.txt", row.names=1)
View(tab)
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(reshape2)
library(ggthemes)
mytitle<-"How do you assess the travel experience \nof the following modes of transportation?"
mylevels<-c("Strongly dislike",	"Dislike",	"Indifferent",	"Like",	"Strongly like")
numlevels<-length(tab[1,])-1
numcenter<-ceiling(numlevels/2)+1
tab$midvalues<-tab[,numcenter]/2
tab2<-cbind(tab[,1],tab[,2:ceiling(numlevels/2)],
tab$midvalues,tab$midvalues,tab[,numcenter:numlevels+1])
colnames(tab2)<-c("outcome",mylevels[1:floor(numlevels/2)],"midlow",
"midhigh",mylevels[numcenter:numlevels])
numlevels<-length(mylevels)+1
point1<-2
point2<-((numlevels)/2)+1
point3<-point2+1
point4<-numlevels+1
mymin<-(ceiling(max(rowSums(tab2[,point1:point2]))*4)/4)*-100
mymax<-(ceiling(max(rowSums(tab2[,point3:point4]))*4)/4)*100
numlevels<-length(tab[1,])-1
temp.rows<-length(tab2[,1])
pal<-brewer.pal((numlevels-1),"RdBu")
pal[ceiling(numlevels/2)]<-"#DFDFDF"
legend.pal<-pal
pal<-c(pal[1:(ceiling(numlevels/2)-1)], pal[ceiling(numlevels/2)],
pal[ceiling(numlevels/2)], pal[(ceiling(numlevels/2)+1):(numlevels-1)])
tab3<-melt(tab2,id="outcome")
tab3$col<-rep(pal,each=temp.rows)
tab3$value<-tab3$value*100
tab3$outcome<-str_wrap(tab3$outcome, width = 40)
tab3$outcome<-factor(tab3$outcome, levels = tab2$outcome[order(-(tab2[,5]+tab2[,6]+tab2[,7]))])
highs<-na.omit(tab3[(length(tab3[,1])/2)+1:length(tab3[,1]),])
lows<-na.omit(tab3[1:(length(tab3[,1])/2),])
lows <- lows[rev(rownames(lows)),]
lows$col <- factor(lows$col, levels = c("#CA0020","#F4A582", "#DFDFDF"))
ggplot() + geom_bar(data=highs, aes(x = outcome, y=value, fill=col), position="stack", stat="identity") +
geom_bar(data=lows, aes(x = outcome, y=-value, fill=col), position="stack", stat="identity") +
geom_hline(yintercept = 0, color =c("white")) +
scale_fill_identity("",labels = mylevels, breaks=legend.pal, guide="legend") +
theme_fivethirtyeight() +
coord_flip() +
labs(title=mytitle, y="Percent",x="") +
theme(plot.title = element_text(size=14, hjust=0.5)) +
theme(axis.text.y = element_text(hjust=0)) +
theme(legend.position = "bottom") +
theme(rect=element_rect(fill ="White", linetype = 0, colour = NA)) +
theme(axis.title = element_text(size=8,hjust=1)) +
scale_y_continuous(breaks=seq(mymin,mymax,25), limits=c(-62,mymax)) #substituí mymin por -62 para cortar um pouco à esquerda
tab<-tab[,-c(7)]
save.image("D:/GIS/Rosix/.RData")
ResultyG_1 <- likert(Personalityyy[c(1:6)], grouping=Personalityyy$CHANGE_Class3)
ResultyGs_1 <- likert(summary = ResultyG_1$results, grouping = ResultyG_1$results[,1])
plot(ResultyGs_1, type="bar", centered=FALSE)
ResultyG_1 <- likert(Personalityyy[c(1:6)], grouping=Personalityyy$CHANGE_Class3)
ResultyGs_1 <- likert(summary = ResultyG_1$results, grouping = ResultyG_1$results[,1])
plot(ResultyGs_1, type="bar", centered=FALSE)
library(tidyverse)
#criar um ponto com coordenadas conhecidas
PontoD <- data.frame(longitude = c(-9.121910), latitude = c(38.767135))
PontoD <- st_as_sf(PontoD,coords = c("longitude", "latitude"), crs=4326)
library(sf)
#criar um ponto com coordenadas conhecidas
PontoD <- data.frame(longitude = c(-9.121910), latitude = c(38.767135))
PontoD <- st_as_sf(PontoD,coords = c("longitude", "latitude"), crs=4326)
class(PontoD)
library(sf)
RouteD<-st_read("D:/GIS/Ricardo/estudodeprocuracicloexpresso/D_Cyclingfastest.shp")
View(RouteD)
library(shiny)
#tendo calculado as rotas de bicicleta de casa dos alunos até à escola D, no QGIS
library(stplanr)
sl = RouteD[RouteD$DIST_KM>0.5 & RouteD$DIST_KM<4 ,] #filtrar só aqueles a mais de 500m e menos de 4km
sl$alunos = 1 #cada route tem 1 aluno a fazer (para depois agregar)
rnetD = overline2(sl, "alunos") #partir as rotas em segmentos e somá-los
lwd = rnetD$alunos / mean(rnetD$alunos) #line width
plot(rnetD, lwd = lwd)
#tendo calculado as rotas de bicicleta de casa dos alunos até à escola D, no QGIS
library(stplanr)
sl = RouteD[RouteD$DIST_KM>0.5 & RouteD$DIST_KM<4 ,] #filtrar só aqueles a mais de 500m e menos de 4km
sl$alunos = 1 #cada route tem 1 aluno a fazer (para depois agregar)
rnetD = overline2(sl, "alunos") #partir as rotas em segmentos e somá-los
lwd = rnetD$alunos / mean(rnetD$alunos) #line width
plot(rnetD, lwd = lwd)
library(shiny)
library(leaflet)
ui = fluidPage(
sliderInput(inputId = "alunos", "Alunos", 1, 102, value = 5),  #slide bar definições
leafletOutput(outputId = "map")
)
server = function(input, output) {
output$map = renderLeaflet({
leaflet() %>% addProviderTiles("OpenStreetMap.BlackAndWhite") %>% #base do OSM
addMarkers(data=PontoD) %>%   #ponto com a escola
addPolylines(col="red", data = rnetD[rnetD$alunos > input$alunos, ])})  #linhas da rede
}
shinyApp(ui, server)
# saveRDS(TABELA, "D:/R/Tabela.Rds")
save.image(".RData")
# saveRDS(TABELA, "D:/R/Tabela.Rds")
save.image(".RData")
shinyApp(ui, server)
install.packages(c("devtools", "rmarkdown", "shiny"))
# saveRDS(TABELA, "D:/R/Tabela.Rds")
save.image(".RData")
# saveRDS(TABELA, "D:/R/Tabela.Rds")
save.image(".RData")
library(shiny)
library(leaflet)
ui = fluidPage(
sliderInput(inputId = "alunos", "Alunos", 1, 102, value = 5),  #slide bar definições
leafletOutput(outputId = "map")
)
server = function(input, output) {
output$map = renderLeaflet({
leaflet() %>% addProviderTiles("OpenStreetMap.BlackAndWhite") %>% #base do OSM
addMarkers(data=PontoD) %>%   #ponto com a escola
addPolylines(col="red", data = rnetD[rnetD$alunos > input$alunos, ])})  #linhas da rede
}
shinyApp(ui, server)
# saveRDS(TABELA, "D:/R/Tabela.Rds")
save.image(".RData")
library(shiny)
library(leaflet)
ui = fluidPage(
sliderInput(inputId = "alunos", "Alunos", 1, 102, value = 5),  #slide bar definições
leafletOutput(outputId = "map")
)
server = function(input, output) {
output$map = renderLeaflet({
leaflet() %>% addProviderTiles("OpenStreetMap.BlackAndWhite") %>% #base do OSM
addMarkers(data=PontoD) %>%   #ponto com a escola
addPolylines(col="red", data = rnetD[rnetD$alunos > input$alunos, ])})  #linhas da rede
}
shinyApp(ui, server)
# saveRDS(TABELA, "D:/R/Tabela.Rds")
save.image(".RData")
library(tidyverse)
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS[,-c(1,2)], type = "html", title = "Descriptive statistics", digits=1 , out="summary1.htm")
#teste com summarytools, lindo!
library(summarytools) #para todo o tipo, gera um html
DescStat<-dfSummary(TODOS[,c(3,4,5,8,15,17,46)])
view(DescStat) #abrir o botão do view pane para o browser, guardar como html
TODOS$Income <- ordered(TODOS$Income)
stargazer::stargazer(TODOS[,-c(1,2)], type = "html", title = "Descriptive statistics", digits=1 , out="summary1.htm")
view(stargazer(TODOS[,-c(1,2)], type = "html", title = "Descriptive statistics", digits=1 , out="summary1.htm"))
view(stargazer(TODOS[,-c(1,2)], type = "html", title = "Descriptive statistics", digits=1)
view(stargazer(TODOS[,-c(1,2)], type = "html", title = "Descriptive statistics", digits=1))
stargazer::stargazer(TODOS, type = "html", title = "Descriptive statistics", digits=1 , out="summary1.htm")
stargazer::stargazer(TODOS, title = "Descriptive statistics", digits=1 , out="summary1.htm")
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS, type = "html", title = "Descriptive statistics", digits=1 , out="summary1.htm")
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS, type = "text", title = "Descriptive statistics", digits=1 , out="summary1.htm")
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS[,c(3,15:17)], type = "text", title = "Descriptive statistics", digits=1 , out="summary1.htm")
#teste com summarytools, lindo!
library(summarytools) #para todo o tipo, gera um html
DescStat<-dfSummary(TODOS[,c(3,4,5,8,15,17)])
view(DescStat) #abrir o botão do view pane para o browser, guardar como html
#teste com summarytools, lindo!
library(summarytools) #para todo o tipo, gera um html
DescStat<-dfSummary(TODOS[,c(3,4,8,15)])
DescStat
#view(DescStat) #abrir o botão do view pane para o browser, guardar como html
#teste com summarytools, lindo!
library(summarytools) #para todo o tipo, gera um html
DescStat<-dfSummary(TODOS[,c(3,4,8,15)], plain.ascii = FALSE)
DescStat
#view(DescStat) #abrir o botão do view pane para o browser, guardar como html
#teste com summarytools, lindo!
library(summarytools) #para todo o tipo, gera um html
DescStat<-dfSummary(TODOS[,c(3,4,8,15)])
print(DescStat, method = "render")
#view(DescStat) #abrir o botão do view pane para o browser, guardar como html
print(DescStat, method = "render")
print(DescStat, method = "render")
#tabela com a descrição das variáveis contínuas e categóricas!
library(summarytools) #para todo o tipo, gera um html
DescStat<-dfSummary(TODOS[,c(3,4,8,15)])
view(DescStat) #abrir o botão do view pane para o browser, guardar como html
save.image(".RData")
print(DescStat, method = "render")
print(DescStat, method = "render")
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS[,c(3,15:17)], type = "text", title = "Descriptive statistics", digits=1)
#mudar o type para text, latex ou htm
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS[,c(3,15:17)], type = "text", title = "Descriptive statistics", digits=1) #mudar o type para text, latex ou htm
print(dfSummary(TODOS[,c(3,4,8,15)], valid.col = F, style = "grid", method = "render")
print(dfSummary(TODOS[,c(3,4,8,15)], valid.col = F, style = "grid", method = "render"))
print(dfSummary(TODOS[,c(3,4,8,15)], valid.col = F, method = "render"))
print(DescStat, method = "render"))
print(DescStat, method = "render")
print(DescStat, valid.col=F, method = "render")
print(DescStat,style = "grid", valid.col=F, method = "render")
print(DescStat,style = "grid",plain.ascii = FALSE, valid.col=F, method = "render")
print(DescStat,style = "grid",plain.ascii = FALSE, valid.col=F, method = "render", tmp.img.dir= "/tmp")
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS[,c(3,15:17)], type = "text", title = "Descriptive statistics", digits=1) #mudar o type para text, latex ou htm
```{r stargazer tables, echo=T, message=FALSE, warning=FALSE}
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS[,c(3,15:17)], type = "text", title = "Descriptive statistics", digits=1) #mudar o type para text, latex ou htm
```
library(tidyverse)
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS[,c(3,15:17)], type = "htm", title = "Descriptive statistics", digits=1) #mudar o type para text, latex ou htm
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS[,c(3,15:17)], type = "html", title = "Descriptive statistics", digits=1) #mudar o type para text, latex ou htm
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS[,c(3,15:17)], type = "latex", title = "Descriptive statistics", digits=1) #mudar o type para text, latex ou htm
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS[,c(3,15:17)], type = "text", title = "Descriptive statistics", digits=1) #mudar o type para text, latex ou htm
suppressPackageStartupMessages(library(summarytools))
st_css()
st_options(bootstrap.css     = FALSE,       # Already part of the theme so no need for it
plain.ascii       = FALSE,       # One of the essential settings
style             = "rmarkdown", # Idem.
dfSummary.silent  = TRUE,        # Suppresses messages about temporary files
footnote          = NA,          # Keeping the results minimalistic
subtitle.emphasis = FALSE)       # For the vignette theme, this gives
# much better results. Your mileage may vary.
suppressPackageStartupMessages(library(summarytools))
st_css()
st_options(bootstrap.css     = FALSE,       # Already part of the theme so no need for it
plain.ascii       = FALSE,       # One of the essential settings
style             = "rmarkdown", # Idem.
dfSummary.silent  = TRUE,        # Suppresses messages about temporary files
footnote          = NA,          # Keeping the results minimalistic
subtitle.emphasis = FALSE)       # For the vignette theme, this gives
# much better results. Your mileage may vary.
st_css()
print(DescStat,valid.col=F, method = "render",  results="asis")
print(DescStat,valid.col=F, method = "render")
print(DescStat,valid.col=F, method = "render")
print(DescStat,valid.col=F, method = "render", style = "grid", tmp.img.dir= "/tmp")
print(DescStat,valid.col=F, method = "render", style = "grid")
#só para contínuas, estilo latex
stargazer::stargazer(TODOS[,c(3,15:17)], type = "html", title = "Descriptive statistics", digits=1, column.sep.width = "15pt") #mudar o type para text, latex ou htm
#só para contínuas, estilo latex
library(stargazer)
stargazer::stargazer(TODOS[,c(3,15:17)], type = "text", title = "Descriptive statistics", digits=1) #mudar o type para text, latex ou htm
#só para contínuas, estilo latex
stargazer::stargazer(TODOS[,c(3,15:17)], type = "html", title = "Descriptive statistics", digits=1, column.sep.width = "100pt") #mudar o type para text, latex ou htm
#só para contínuas, estilo latex
stargazer::stargazer(TODOS[,c(3,15:17)], type = "html", title = "Descriptive statistics", digits=1, column.sep.width = "100pt", font.size = "small") #mudar o type para text, latex ou htm
